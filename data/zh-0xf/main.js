const 数字表 = {
    "0":"〇", "1":"丿", "2":"刀", "3":"川",
    "4":"卅", "5":"日", "6":"月", "7":"田",
    "8":"申", "9":"才", "a":"木", "b":"术",
    "c":"乂", "d":"丈", "e":"爻", "f":"艾",
}
const 阿拉伯数表 = ["1","2","3","4","5","6","7","8","9","0"]
const 单位表 = ["", "又", "双", "叒", "", "叕", "缀", "辍"]        //单位表前四位是每位数都会有的“小单位”，后面是每四位数会遇到的“大单位”。

function 转又进制(数字, 格式 = "短", 精确度 = 0) {
    typeof(数字) != "number" ? console.error("参数类型错误") : {};
    格式 != "短" && 格式 != "长" ? console.error("“格式”参数超出预料") : {};
    精确度 % 1 != 0 ? console.error("精确度类型错误") : {};
    数字 % 1 != 0 ? console.log("检查到浮点类型参数，将对其取整") : {};

    数字 = Math.round(数字 / 0x10**精确度) * 0x10**精确度
    const 数字文本 = 数字.toString(16)
    let 逆数字文本 = ""
    for (const 数位 of 数字文本) 逆数字文本 = 数位 + 逆数字文本;
    if (格式 == "短") {
        let 结果 = ""
        const 分隔符 = ","
        for (const 数位 of 逆数字文本) {
            结果 = 数字表[数位] + 结果
            结果长度 = 结果.length + 1      //考虑到分隔符的长度
            结果长度 % 5 == 0 ? 结果 = 分隔符 + 结果 : {}
        }
        结果[0] == 分隔符 ? 结果 = 结果.slice(1) : {}
        return 结果
    }else if (格式 == "长") {
        const 数字长度上限 = (单位表.length - 4) * 4
        数字文本.length > 数字长度上限 ? console.error("参数大小超出上限") : {}
        let 结果 = ""
        for (let 数位号 = 0; 数位号 < 逆数字文本.length; 数位号 += 4) {
            结果 = 单位表[数位号/4 + 4] + " " + 结果;
            let 小节 = 逆数字文本.slice(数位号,数位号+4)
            let 小节数位号 = 0
            while (小节[小节数位号] == "0") 小节数位号++
            for (; 小节数位号 < 4 && 数位号 + 小节数位号 < 逆数字文本.length; 小节数位号++) {
                let 小节数位 = 小节[小节数位号]
                if (小节数位 != "0") {结果 = 数字表[小节数位] + 单位表[小节数位号] + 结果}
                else {结果 = 数字表[小节数位] + 结果; break;}   //即添〇
            }
            for (; 小节数位号 < 4 && 数位号 + 小节数位号 < 逆数字文本.length; 小节数位号++) {
                let 小节数位 = 小节[小节数位号]
                if (小节数位 != "0") {结果 = 数字表[小节数位] + 单位表[小节数位号] + 结果}
                else {continue;}
            }
        }
        return 结果
    }
}

function 生成乘法表() {
    let 乘法表体 = document.createElement('tbody')
    let 乘法表内容 = ""
    for (let i = 1; i < 0x10; i++) {
        乘法表内容 += "<tr>"
        for (let j = 1; j < i + 1; j++) {
            let 积数 = 转又进制(i * j, "长")
            let 因数_i = 转又进制(i)
            let 因数_j = 转又进制(j)
            乘法表内容 += `<td>${因数_j}${因数_i}${积数.length < 3 ? "得" : ""}${积数}</td>`
        }
        乘法表内容 += "</tr>"
    }
    乘法表体.innerHTML = 乘法表内容
    let tmp = document.getElementById("乘法表")
    tmp.appendChild(乘法表体)
}
生成乘法表()

function 转化器(源文本) {
    // let 源文本 = document.converter.textSource.value;
    let 生成文本 = ""
    let 当前数字 = ""
    let 汉制数字 = ""
    for (const i of 源文本) {
        if (阿拉伯数表.indexOf(i)) {
            当前数字 += i
        } else {
            当前数字 != "" ? 汉制数字 = 转又进制(当前数字-0) : {}
            生成文本 = 生成文本 + 汉制数字 + i
            当前数字 = ""
        }
    }
    console.log(生成文本)
}

转化器("1与1与1")